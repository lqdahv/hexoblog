[{"title":"Node.js PHP处理XML数据","url":"/2022/08/17/Node.js_PHP%E5%A4%84%E7%90%86XML%E6%95%B0%E6%8D%AE/","content":"<blockquote>\n<p>现在XML数据相对来说比较少，微信公众号发送的信息就是XML格式的，影视采集站是json和xml</p>\n</blockquote>\n<h3 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h3><p><a href=\"https://www.npmjs.com/package/express-xml-bodyparser\">express-xml-bodyparser</a>模块会把请求体中的xml转为json格式，之后用req.body就能取到数据了</p>\n<p>给客户端发送xml数据用<a href=\"https://www.npmjs.com/package/xml2js#xml-builder-usage\">xml2js</a>模块<br><img src=\"https://i.imgtg.com/2022/08/17/Kz8jg.png\" alt=\"nodejsxml\"></p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><p><code>file_get_contents(&quot;input://input&quot;)</code>方法拿到请求体源数据，拿到后再用<code>simplexml_load_string(xml,SimpleXMLElement,LIBXML_NOCDATA)</code>方法把xml转为simplexml对象，之后直接用-&gt;取值</p>\n<p>这里有个很重要的点，如果数据中含有<code>&lt;![CDATA[data...]]&gt;</code>需要再传递第三个参数LIBXML_NOCDATA把CDATA数据转为字符串，没传这个参数就取不到数据</p>\n<p>刚开始看别人文章只传了前两个参数给我整半小时，最后专门去查了这个方法才发现可以传三个参数来解决CDATA<br><img src=\"https://i.imgtg.com/2022/08/17/Kz6Rl.png\" alt=\"phpxml\"></p>\n","categories":["后端编程"],"tags":["node.js","xml"]},{"title":"Node.js小爬虫之澎湃热榜","url":"/2022/09/01/Node.js%E5%B0%8F%E7%88%AC%E8%99%AB%E4%B9%8B%E6%BE%8E%E6%B9%83%E7%83%AD%E6%A6%9C/","content":"<p>先请求下热搜榜所在页面，发现搜不到关键字<br><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842baa242fa0505e8f34fee269cb12273173c181fe79bb8f44b/0.png\" alt=\"请输入图片描述\"></p>\n<p>再看看开发者工具的页面链接，第一眼看请求选项卡，有个rightSidebar，进去后搜索到，说明是HTTP请求渲染上去的<br><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842baa242fa0505e8f3b176ac6aa710a07aeb4e313a0932512f/0.png\" alt=\"请输入图片描述\"><br><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842baa242fa0505e8f3bbf4c91c516c0765b8b169aec874ddd9/0.png\" alt=\"请输入图片描述\"></p>\n<p>Nodejs用的是Axios包,请求这个API，拿到hotNews</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> result<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.thepaper.cn/contentapi/wwwIndex/rightSidebar'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string-property property\">'user-agent'</span><span class=\"token operator\">:</span> 'Mozilla<span class=\"token operator\">/</span><span class=\"token number\">5.0</span> <span class=\"token punctuation\">(</span>Windows <span class=\"token constant\">NT</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">;</span> Win64<span class=\"token punctuation\">;</span> x64<span class=\"token punctuation\">)</span> AppleWebKit<span class=\"token operator\">/</span><span class=\"token number\">537.36</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">KHTML</span><span class=\"token punctuation\">,</span> like Gecko<span class=\"token punctuation\">)</span> \n    Chrome<span class=\"token operator\">/</span><span class=\"token number\">104.0</span><span class=\"token number\">.5112</span><span class=\"token number\">.102</span> Safari<span class=\"token operator\">/</span><span class=\"token number\">537.36</span> Edg<span class=\"token operator\">/</span><span class=\"token number\">104.0</span><span class=\"token number\">.1293</span><span class=\"token number\">.70</span>'\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>hotNews<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>因为我要把这些采集的数据存到数据库，这里用到的数据库是LeanCloud，免费数据库<br>然后的话我用的是koa框架，支持async await语法，请求API和数据库操作都是异步<br><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842baa242fa0505e8f36b3aa03704e229ab3292fbfb39c8c158/0.png\" alt=\"请输入图片描述\"></p>\n<p>for循环里用await的话会等异步执行完才会进行下一次循环，这样才能保证采集的数据和写入数据库顺序不会混乱，那段像jQuery是用的cheerio包，可以像在客户端里一样操作DOM</p>\n<p>还有个采集数据必不可少的就是你得让他定时采集，node-schedule包，支持cron表达式，定时每小时30分时采集一次<br><code>schedule.scheduleJob(&#39;30 * * * *&#39;, async function()&#123;&#125;)</code></p>\n","categories":["后端编程"]},{"title":"Axios挂载到Vue全局配置，beforeRouteEnter无法使用Axios的问题","url":"/2022/08/24/Axios%E6%8C%82%E8%BD%BD%E5%88%B0Vue%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%EF%BC%8CbeforeRouteEnter%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8Axios%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<p>Vue3使用<code>createApp(App).config.globalProperties.axios = axios</code>即可把axios对象挂载到Vue实例中</p>\n<p>因为页面进入后再请求后台数据会有闪烁问题，即默认数据和请求数据替换<br><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa051684291d06431bce71a5c4d679c7410196d8f957939e49de5c98d/0.png\" alt=\"请输入图片描述\"><br>这种解决办法就是先显示个加载图标之类的，等待数据请求完成再把加载图标隐藏即可</p>\n<p>Vue还提供了beforeRouteEnter组件路由钩子，可以在路由进入前执行一些操作，所以可以在此期间请求数据，并通过next回调的参数获取Vue实例，从而赋值数据给实例data来更新页面数据，这种方式可以完美解决闪烁问题</p>\n<p>但由于此时无法获取Vue实例，自然Vue实例上的axios对象也拿不到</p>\n<p>目前能想到的两种解决办法就是在使用beforeRouteEnter的组件内手动引入axios或者使用原生HTTP请求(Fetch、XMLHttpRequest)替代</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/getPosts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    vm<span class=\"token punctuation\">.</span>posts <span class=\"token operator\">=</span> res\n  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","categories":["前端编程"]},{"title":"Promise链式调用","url":"/2022/02/15/Promise%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8/","content":"<h3 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h3><p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c58979dfc6eada2c05de8dc6646efc9df18f/0.png\" alt=\"请输入图片描述\"></p>\n<p>因为then方法返回的是Promise所以可以一直使用then方法获取Promise的值，为了让回调正确获取到值，可以return Promise或者其他数据类型(字符串，数组等)</p>\n<p>但是值得注意的是，当用定时器延迟return时，下一个then方法并不会等待这个延迟执行完再调用回调函数，所以导致了最后的回调获取不到值。如果下一个回调要获取上一个延迟return值一定要return Promise</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c5890eb84f1c5af16955145e7b99e57e1b88/0.png\" alt=\"请输入图片描述\"></p>\n<h3 id=\"reject终止链式调用\"><a href=\"#reject终止链式调用\" class=\"headerlink\" title=\"reject终止链式调用\"></a>reject终止链式调用</h3><p>当进行then链式调用时，如果其中有Promise是reject（失败）的情况，那么之后的链式不会继续执行，可以用catch去捕获reject值。</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c589992b2b850b7b3f1e1353c63b73523bd4/0.png\" alt=\"请输入图片描述\"></p>\n<p>Promise resolve()和Promise reject()会自动转为Promise，记得它是一个Promise对象</p>\n","categories":["前端编程"]},{"title":"axios文档流下载","url":"/2021/07/15/axios%E6%96%87%E6%A1%A3%E6%B5%81%E4%B8%8B%E8%BD%BD/","content":"<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token operator\">**</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//要下载的文件链接</span>\n    <span class=\"token literal-property property\">responseType</span><span class=\"token operator\">:</span> <span class=\"token string\">'arraybuffer'</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> url <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'arraybuffer'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token comment\">//创建a链接 并设置隐藏 模拟click()方法点击 </span>\n    <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'下载图片'</span><span class=\"token punctuation\">)</span>\n    link<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n    link<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> <span class=\"token string\">'none'</span>\n    link<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'download'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1280.jpg'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//设置下载名称 </span>\n    link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span>\n    link<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","categories":["前端编程"],"tags":["axios","HTTP"]},{"title":"Vue路由传参的三种方式","url":"/2021/08/27/Vue%E8%B7%AF%E7%94%B1%E4%BC%A0%E5%8F%82%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/","content":"<p>路由:从一个页面导航到另一个页面，可以传参数到新页面，有三种方式</p>\n<p>当用router-link标签进行跳转时(声明式导航)，路由文件的path值用<font color=\"red\">:prop</font>(prop名字随意)去接收路由链接的参数，用this.$route.params.<font color=\"red\">prop</font>就能拿到传过来的参数注意</p>\n<p><img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206967/33/7152/44163/617b41b7E34fbd586/a129c5b48eb45946.png\" alt=\"请输入图片描述\"><br><img src=\"https://img13.360buyimg.com/ddimg/jfs/t1/203659/32/13099/50428/617b41d9E5a321cd6/28f80768eab8e2f6.png\" alt=\"请输入图片描述\"><br><img src=\"https://img13.360buyimg.com/ddimg/jfs/t1/207973/18/7221/44875/617b41edE23302fd2/acd17d1259733e48.png\" alt=\"请输入图片描述\"><br><img src=\"https://img11.360buyimg.com/ddimg/jfs/t1/161548/8/22787/10466/617b4622E0b971619/b41ef058ed862b03.png\" alt=\"请输入图片描述\"></p>\n<hr>\n<p>还有两种是通过绑定to属性，这种方式在路由文件的<strong>path就不用写:prop去接收了,记得去掉</strong></p>\n<p><strong>:to{path:’about’,query:{prop:’参数参数’}}</strong></p>\n<p><img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/170217/33/21283/41772/617b4779E6ec216cd/5e6fae57dd89e5b4.png\" alt=\"请输入图片描述\"><br>用this.$route.query.prop去获取参数</p>\n<p><img src=\"https://img12.360buyimg.com/ddimg/jfs/t1/219012/19/2250/8813/617b4622E565a5b79/422be182c93361ff.png\" alt=\"请输入图片描述\"><br>浏览器地址栏里会出现?prop=参数参数</p>\n<hr>\n<p><strong>:to{name:’About’,params:{prop:’命名路由的参数’}}</strong><br>路由文件里要写上name:About，不然会找不到这个路由</p>\n<p><img src=\"https://img14.360buyimg.com/ddimg/jfs/t1/141331/36/21084/40940/617b4841E9b60f188/f1e918dc233fdece.png\" alt=\"请输入图片描述\"><br>用this.$route.params.prop去获取参数</p>\n<p><img src=\"https://img13.360buyimg.com/ddimg/jfs/t1/145941/14/21202/11374/617b4841E157d8ebc/f3aa6bf430628165.png\" alt=\"请输入图片描述\"></p>\n<p>这种方式地址栏不会出现参数，而且当刷新网页时参数会丢失</p>\n<p>这两种方式在编程式导航里效果是一样的<br>this.$router.push({path:’about’,query:{prop:’参数参数’}})<br>this.$router.push({name:’About’,params:{prop:’命名路由的参数’}})</p>\n","categories":["前端编程"],"tags":["Vue路由","Vue传参"]},{"title":"css-minimizer-webpack-plugin和生产模式下JavaScript自动压缩冲突","url":"/2022/03/12/css-minimizer-webpack-plugin%E5%92%8C%E7%94%9F%E4%BA%A7%E6%A8%A1%E5%BC%8F%E4%B8%8BJavaScript%E8%87%AA%E5%8A%A8%E5%8E%8B%E7%BC%A9%E5%86%B2%E7%AA%81/","content":"<p>在production模式下webpack会自动压缩JavaScript代码，但是遇到了使用css-minimizer-webpack-plugin压缩css代码插件时自动压缩JavaScript代码失效，这个时候可以使用terser-webpack-plugin去压缩JavaScript代码，这个插件webpack5自带，不用npm安装，直接require引用就行了</p>\n","categories":["前端编程"]},{"title":"ele.style、getComputedStyle、ele.currentStyle三种读||写样式的方法","url":"/2022/03/12/ele.style%E3%80%81getComputedStyle%E3%80%81ele.currentStyle%E4%B8%89%E7%A7%8D%E8%AF%BB__%E5%86%99%E6%A0%B7%E5%BC%8F%E7%9A%84%E6%96%B9%E6%B3%95/","content":"<p><code>ele.style</code>能够设置或者返回样式,但是只对内联样式(标签内style属性设置的样式)起作用<br><code>getComputedStyle(ele,[pseudoElt]).getPropertyValue(attr)</code>只能获取样式，不能写入样式，<strong>不兼容IE</strong><br><code>ele.currentStyle(attr)</code>只能获取样式，不能写入样式，<strong>只兼容IE</strong></p>\n","categories":["前端编程"]},{"title":"file-loader,url-loader在webpack5中废弃，改用asset module","url":"/2022/03/06/file-loader,url-loader%E5%9C%A8webpack5%E4%B8%AD%E5%BA%9F%E5%BC%83%EF%BC%8C%E6%94%B9%E7%94%A8asset_module/","content":"<p>之前版本file-loader,url-loader能够处理输出css样式中的图片和字体文件，webpack5已经可以使用内建的资源模块类型(asset module type)，html中的img标签图片还需要使用html-loader。<br>资源模块类型可以规定以下4种type属性值<br>type: asset/resource 之前版本的 file-loader 功能<br>type: asset/inline   之前版本的url-loader 输出为base64编码<br>type: asset/source   之前版本的raw-loader 导出源代码<br>type: asset   之前版本的url-loader 这个可以规定小于多少kb时输出base64编码</p>\n<p>自定义输出文件名</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">generator</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">'[hash:6][ext][query]'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>或者在output对象添加assetModuleFilename: ‘images/[hash][ext][query]</p>\n<p>url-loader能在小于规定kb时自动把图片转为base64编码，现在使用以下实现</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">dataUrlCondition</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token literal-property property\">maxSize</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果想继续用这些loader可以添加type: ‘javascript/auto’属性值</p>\n","categories":["前端编程"]},{"title":"javascript图片转base64","url":"/2021/09/21/javascript%E5%9B%BE%E7%89%87%E8%BD%ACbase64/","content":"<p><code>&lt;input type=&quot;file&quot; id=&quot;a&quot; onChange=&quot;b()&quot;&gt;</code><br>文件上传后就会触发onChange,上传的图片文件可在获取到该dom节点后用files[0]去拿到这个图片</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pic <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">var</span> tobase64 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntobase64<span class=\"token punctuation\">.</span><span class=\"token function\">readAsDataURL</span><span class=\"token punctuation\">(</span>pic<span class=\"token punctuation\">)</span>\ntobase64<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//onload会在读取成功后触发</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>还有两个可能用的上的方法readAsArrayBuffer()和readAsText()<br>readAsArrayBuffer()返回的是arrayBuffer对象,readAsText()返回的是文本字符串，这个方法有还能接收第二个参数，指定字符串的编码类型，默认为UTF-8<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader\">FileReade API</a></p>\n","categories":["前端编程"],"tags":["JavaScript","图片处理","base64"]},{"title":"jQuery在添加新元素或则替换元素后添加监听事件","url":"/2022/08/06/jQuery%E5%9C%A8%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%85%83%E7%B4%A0%E6%88%96%E5%88%99%E6%9B%BF%E6%8D%A2%E5%85%83%E7%B4%A0%E5%90%8E%E6%B7%BB%E5%8A%A0%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6/","content":"<p>在替换元素后，或则添加新元素后用<code>$(&#39;选择器&#39;).on(&#39;click&#39;,()=&gt;&#123;&#125;)</code>这样是监听不到的</p>\n<p>jQ1.7版本时可以用delegate方法，之后被on方法取代，上面on方法不行是用的方法不对，需要这样写</p>\n<p><code>$(document).on(&#39;click&#39;,&#39;选择器&#39;,()=&gt;&#123;&#125;)</code>,这样就能监听到新元素了</p>\n","categories":["前端编程"]},{"title":"nodejs把响应内容保存到本地，而不是打开","url":"/2021/10/02/nodejs%E6%8A%8A%E5%93%8D%E5%BA%94%E5%86%85%E5%AE%B9%E4%BF%9D%E5%AD%98%E5%88%B0%E6%9C%AC%E5%9C%B0%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E6%89%93%E5%BC%80/","content":"<p>创建一个nodejs应用时，在res.end(？)输出一个图片时，他是直接显示在网页上的，以下这个例子</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c589769ceea51cdcb1e97c974d42e7845675/0.png\" alt=\"请输入图片描述\"></p>\n<p>我们也经常看到点击下载按钮就可以下载图片，在nodejs中想要下载保存到本地就需要向response响应中添加响应头headers，nodejs中使用response.writeHead()去添加响应头，想要做到下载功能就要把</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">res.writeHead(200,&#123;&#39;Content-Disposition&#39;:&#39;attachment;filename&#x3D;example.png&#39;&#125;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>添加到响应头对象中。Content-Disposition有两个属性值，当你不设置Content-Disposition属性时，就是用inline作为默认值，即是上图中直接显示在浏览器中，当你设置了attachment作为属性值时，就能实现下载功能，example.png是浏览器显示的下载文件名，可自行更改为变量或常量，如下</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c58925fda2aad032d50ea8a6266dc86cb4b0/0.png\" alt=\"请输入图片描述\"></p>\n<p>这里补充一下，上面的例子是用http请求网络图片资源，如果要获取自己服务器磁盘上资源时可以用fs.readFile(‘filePath’,function(ress){})方法去获取,其他代码不变，回调函数的ress参数有data事件能在读取数据时触发回调函数，参数chunk就是一段文件的Buffer数据,把data事件中获取的每段Buffer数据保存在数组中，最后用Buffer.concat()去合并，结果就是整个文件的Buffer数据了</p>\n","categories":["前端编程"],"tags":["Nodejs","图片","下载"]},{"title":"scroll滚动兼容性","url":"/2021/12/05/scroll%E6%BB%9A%E5%8A%A8%E5%85%BC%E5%AE%B9%E6%80%A7/","content":"<p>安卓测试的是极速浏览器(基于Chromium 73内核)国内浏览器和Chrome浏览器</p>\n<p>分别试了两种js和一种jQuery滚动方法</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">scroll</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token comment\">//window.scrollY(获取垂直滚动距离)window.scrollX(获取水平滚动距离)</span>\ndocument<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> y\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在极速浏览器中只有window.scroll(x,y)才能生效，Chrome浏览器三种方法都能用</p>\n","categories":["前端编程"],"tags":["JavaScript","网页滚动"]},{"title":"vuejs标签/选项卡切换效果","url":"/2021/09/08/vuejs%E6%A0%87%E7%AD%BE_%E9%80%89%E9%A1%B9%E5%8D%A1%E5%88%87%E6%8D%A2%E6%95%88%E6%9E%9C/","content":"<p>相信有看到过很多这种常用的效果，切换上面不同的按钮显示不同内容，vuejs可以很容易实现这种效果</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c5899afa74b875bc5305588db695769807bc/0.png\" alt=\"请输入图片描述\"></p>\n<p>在vuejs中有一个component标签，这个标签有个is属性，通过v-bind绑定这个属性就可以切换不同的组件，下面写了个例子</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c5892514c0c3b4cd77014db22648520f17ba/0.png\" alt=\"请输入图片描述\"></p>\n<p>引入两个组件tabOne和tabTwo并注册，component标签绑定的is属性值在data()中通过tab来改值，然后通过one和two两个函数改变tab的值，值就是组件名称，点击两个按钮后就会发现显示的是两个不同组件了</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c589ac6dedcec008fd6db0d835246583ff00/0.png\" alt=\"请输入图片描述\"></p>\n<p>这里也出现另一种情况，切换回来的时候输入框里面的内容没了？在切换不同组件时都是新创建实例的，所以会出现组件默认状态，input是默认没输入的，123是我自己输入的，所以切换回去输入框为空。<br>如果想保留切换之前的状态，可以使用keep-alive缓存标签</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c589c0e487c71c0f24a1d289cf83ae39542c/0.png\" alt=\"请输入图片描述\"></p>\n","categories":["前端编程"],"tags":["Vue"]},{"title":"webpack-dev-server报webpack-cli not found错误","url":"/2022/03/06/webpack-dev-server%E6%8A%A5webpack-cli_not_found%E9%94%99%E8%AF%AF/","content":"<p>webpack-dev-server4.0.0之前用npx webpack-dev-server启动本地服务器，webpack&gt;=4.0.0后用这个命令会报webpack-cli not found,需要用webpack serve来启动server服务,并且static属性来提供服务路径</p>\n","categories":["前端编程"]},{"title":"利用github actions自动执行Node.js脚本","url":"/2022/09/22/%E5%88%A9%E7%94%A8github-actions%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8CNode-js%E8%84%9A%E6%9C%AC/","content":"<blockquote>\n<p>上一篇爬取澎湃热榜里说到node-schedule定时任务，但在白嫖Vercel无服务函数时并不会执行这个包，无奈只能另想它法</p>\n</blockquote>\n<p>这里使用<strong>免费</strong>的github actions</p>\n<p>首先在仓库下新建文件<code>.github/workflows/abc.yml</code>,文件名随便取</p>\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> coupons //自定义\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span>   \n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">cron</span><span class=\"token punctuation\">:</span> '5 7<span class=\"token punctuation\">-</span>23 * * <span class=\"token important\">*'</span> //cron表达式，用于将任务放置队列\n  <span class=\"token key atrule\">workflow_dispatch</span><span class=\"token punctuation\">:</span> //定义这个可以手动执行，否者不会显示手动执行按钮\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">run-coupons</span><span class=\"token punctuation\">:</span> //这个也可以自定义，只是显示\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest //运行在最新ubuntu\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span> // 这个就是执行步骤\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@master\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup Node.js\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2 //设置运行时的nodejs环境\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> '16' // 16版本的nodejs\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install Dependency       \n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span>\n          npm install axios //不push node_modules就要安装\n          node ./index.js //运行根目录index.js文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在本地push到仓库时，如果不<code>push node_modules</code>模块文件夹，那就需要在添加<code>npm install 模块名</code>,比如index.js要用到axios，那就<code>npm install axios</code>去安装。还有<code>push package.json</code>，那么只需要<code>npm install</code>就会安装全部依赖</p>\n<p>重要的提示一下，设置的cron表达式并不是说设置了 <code>0 * * * *</code>就会每小时0分执行脚本，它只是把执行放入队列，真正执行可能时稍后几分钟，或者不会执行，想精确定时任务这种是达不到要求的</p>\n","categories":["后端编程"]},{"title":"使用AbortController中止http请求","url":"/2022/08/08/%E4%BD%BF%E7%94%A8AbortController%E4%B8%AD%E6%AD%A2http%E8%AF%B7%E6%B1%82/","content":"<p>AbortController可以中止Fetch请求，在Axios的0.22.0版本后也可以使用该方法。</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> controller<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> signal<span class=\"token operator\">=</span>controller<span class=\"token punctuation\">.</span>signal\n<span class=\"token keyword\">function</span> <span class=\"token function\">mydata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span>signal<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>使用<code>controller.abort()</code>即可中止存在<code>&#123;signal:signal&#125;</code>信号的请求</p>\n<h3 id=\"存在的问题\"><a href=\"#存在的问题\" class=\"headerlink\" title=\"存在的问题\"></a>存在的问题</h3><p>当第二次使用该请求时会发现无法再次发送请求，这个问题的原因是controller.abort()中止请求后<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/AbortSignal\">signal的aborted属性就为true</a>(表示已中止了请求)，导致了无法再次发送请求，所以解决办法就是把用过的AbortController实例清空重新创建新实例</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> controller<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>\n<span class=\"token keyword\">var</span> signal<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">mydata</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  controller<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  signal<span class=\"token operator\">=</span>controller<span class=\"token punctuation\">.</span>signal\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">signal</span><span class=\"token operator\">:</span>signal<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">function</span> <span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>controller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    controller<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    controller<span class=\"token operator\">=</span><span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面代码abort中止函数会判断是否有AbortController实例controller，如果有就中止它并且清空中止后的实例，在下次请求时会创建一个新实例，拿到的就是新的signal，就不会存在无法发送请求的情况</p>\n","categories":["前端编程"]},{"title":"事件委托(利用冒泡实现管理子元素","url":"/2021/12/07/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98(%E5%88%A9%E7%94%A8%E5%86%92%E6%B3%A1%E5%AE%9E%E7%8E%B0%E7%AE%A1%E7%90%86%E5%AD%90%E5%85%83%E7%B4%A0/","content":"<p>刚看到别人写的JavaScript总结发现个事件委托，学了两年没印象了-_-，然后用强大的搜索引擎发现其实就是利用事件冒泡做的一个性能优化方案</p>\n<p>我把事件绑定到ul上，但点击了li也能触发，由里往外触发绑定的事件，这就是事件冒泡。<br><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c5893dc5435104d44e700850838f1b7dedb2/0.png\" alt=\"请输入图片描述\"><br>要获取li元素可以使用target属性，这个是通过触发点击事件时传入函数参数e(这个自定义名)获取的一个属性。e.target获取的就是点击的li元素，还有个currentTarget这个属性获取的就是绑定了事件的元素(ul)<br><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c589b6154fa0912fb65d66bcaa2ed32c5502/0.png\" alt=\"请输入图片描述\"></p>\n<p>在不用事件委托前都是用for循环li元素来为每个li绑定事件，如果有100？1000？个那就要循环很多次，现在用了事件委托只需要绑定一次就能处理多个子元素</p>\n","categories":["前端编程"]},{"title":"正则的前瞻断言和后瞻断言","url":"/2022/07/25/%E6%AD%A3%E5%88%99%E7%9A%84%E5%89%8D%E7%9E%BB%E6%96%AD%E8%A8%80%E5%92%8C%E5%90%8E%E7%9E%BB%E6%96%AD%E8%A8%80/","content":"<p>前瞻断言模式:<code>X(?=Y)</code>意思是X后面要跟着Y</p>\n<p>后瞻断言:<code>(?&lt;=Y)X</code>意思是X前面是Y</p>\n<p>这两种模式都有否定断言，只需要把=换成!</p>\n<p>这两种匹配模式都不会匹配括号中的内容，像匹配html中img标签的src属性链接，匹配<code>&lt;img src=&quot;https://abc.gif&quot; alt=&quot;Smiley face&quot; width=&quot;42&quot; height=&quot;42&quot;&gt;</code>,可以这样匹配<code>(?&lt;=src=&quot;).+(?=&quot; alt)</code>,这样就能拿到链接了</p>\n","categories":["前端编程"]},{"title":"数组的map()方法对数组里对象的合并处理","url":"/2021/11/22/%E6%95%B0%E7%BB%84%E7%9A%84map()%E6%96%B9%E6%B3%95%E5%AF%B9%E6%95%B0%E7%BB%84%E9%87%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%90%88%E5%B9%B6%E5%A4%84%E7%90%86/","content":"<p>假设有以下两个数组<br><img src=\"https://cdn.jsdelivr.net/gh/lqdahv2/blogImg/typecho/map%E6%96%B9%E6%B3%95%E5%90%88%E5%B9%B61.png\"><br>两个数组中都有name属性值为小明的对象，第二个数组中多了一个QQ的属性，现在想把这个QQ合并到第一个数组中，可以使用**map()**方法进行合并处理</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/lqdahv2/blogImg/typecho/map%E6%96%B9%E6%B3%95%E5%90%88%E5%B9%B62.png\"><br>map()其实也是循环方法，item1为当前循环的数组元素，也就是里面的对象。首先用filter去过滤出arr2中是否包含当前item1的name相同的对象，如果找到(<strong>filter.length!=0</strong>)就能把第二个数组中过滤出的对象属性赋值给第一个数组的当前对象属性(<strong>item1.QQ=filter[0].QQ</strong>),然后return这个item1，<strong>如果不进行return，那返回的是undefined,所以记得一定要返回。</strong><br>还有如果第二个数组的小明对象有很多个属性，想把里面的属性全部合并给第一个数组，那可以用ES6对象方法**Object.assign(to,from)**去合并两个对象，相同属性的话后面属性会覆盖前面属性</p>\n","categories":["前端编程"],"tags":["JavaScript","js数组处理","数组过滤"]},{"title":"正则的懒惰量词","url":"/2022/07/26/%E6%AD%A3%E5%88%99%E7%9A%84%E6%87%92%E6%83%B0%E9%87%8F%E8%AF%8D/","content":"<p>拿<a href=\"http://728728.xyz/archives/24.html\">上篇文章</a><code>&lt;img src=&quot;https://abc.gif&quot; alt=&quot;Smiley face&quot; width=&quot;42&quot; height=&quot;42&quot;&gt;</code>标签来讲</p>\n<p>想匹配链接上篇是用到了前瞻断言和后瞻断言，初次用正则用src=”.+”这样匹配规则来匹配,但是其实他是匹配到了<code>src=&quot;https://abc.gif&quot; alt=&quot;Smiley face&quot; width=&quot;42&quot; height=&quot;42&quot;</code>,这是因为这种模式是贪婪模式，会尽可能多匹配，所以会匹配到最后一个”符号</p>\n<p>想要仅少匹配就需要用到懒惰量词进行懒惰匹配，只需要在量词比如.+ .*就是量词后加?号就是懒惰量词，所以最后的正则规则是<code>src=&quot;.+?&quot;</code>，匹配结果就是<code>src=&quot;https://abc.gif&quot;</code><br>这还多出了src=这个属性，只需要在量词加个括号<code>src=&quot;(.+?)&quot;</code>，最终会返回一个数组，<code>[src=&quot;https://abc.gif&quot;,https://abc.gif]</code>,可以看出他匹配的结果是把<code>src=&quot;.+?&quot;和(.+?)</code>结果存进数组</p>\n","categories":["前端编程"]},{"title":"用ES6的解构删除和过滤出属性","url":"/2022/03/30/%E7%94%A8ES6%E7%9A%84%E8%A7%A3%E6%9E%84%E5%88%A0%E9%99%A4%E5%92%8C%E8%BF%87%E6%BB%A4%E5%87%BA%E5%B1%9E%E6%80%A7/","content":"<p>假如有这么个对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'xiaoming'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">position</span><span class=\"token operator\">:</span><span class=\"token string\">'grass-roots'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">married</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">hobby</span><span class=\"token operator\">:</span><span class=\"token string\">'basketball'</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如想要除了married,hobby属性外的全部属性（删除）<br><code>const &#123;married,hobby,...all&#125;=obj</code></p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c5896f172dc7be6403977d253a298b8f6623/0.png\" alt=\"删除\"><br>想要married和hobby两个属性,用自执行函数来写（过滤）</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> two<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>married<span class=\"token punctuation\">,</span>hobby<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>married<span class=\"token punctuation\">,</span>hobby<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c589f6b0fc4b88a5cbd95f49a98d539620f9/0.png\" alt=\"请输入图片描述\"><br>写成ES6的箭头函数就是</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> two<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>married<span class=\"token punctuation\">,</span>hobby<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>married<span class=\"token punctuation\">,</span>hobby<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>然后函数体只有一条语句时可以省略掉函数体符号{}和return，这条语句是个对象用括号括起来，最后就优化成这样了-_-</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> two<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>married<span class=\"token punctuation\">,</span>hobby<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>married<span class=\"token punctuation\">,</span>hobby<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n","categories":["前端编程"]},{"title":"联通虚拟定位领数字人民币充值话费活动","url":"/2022/08/06/%E8%81%94%E9%80%9A%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D%E9%A2%86%E6%95%B0%E5%AD%97%E4%BA%BA%E6%B0%91%E5%B8%81%E5%85%85%E5%80%BC%E8%AF%9D%E8%B4%B9%E6%B4%BB%E5%8A%A8/","content":"<h3 id=\"领取条件\"><a href=\"#领取条件\" class=\"headerlink\" title=\"领取条件\"></a>领取条件</h3><p>已ROOT安卓机(Magisk)，因为要进行虚拟定位操作，定位软件可以用[Fake location][1]，没ROOT就放弃吧</p>\n<p>分别定位到以下三个地区都可以领取20元数字人民币，可以在联通营业厅APP用数字钱包充值话费，20话费分4个月，每月5元领取，海南领完了，没领到，领其他两个<br>海南：<a href=\"http://u.10010.cn/0tyJbA0O\">http://u.10010.cn/0tyJbA0O</a><br>广州：<a href=\"http://u.10010.cn/0tyJC2kQ\">http://u.10010.cn/0tyJC2kQ</a><br>上海：<a href=\"http://u.10010.cn/0tyJCNwT\">http://u.10010.cn/0tyJCNwT</a></p>\n<p>数字钱包会检测到Magisk，设置Zygisk排除列表就行<br>  [1]: <a href=\"https://github.com/Lerist/FakeLocation/releases\">https://github.com/Lerist/FakeLocation/releases</a></p>\n","categories":["优惠活动"]},{"title":"用async/await改变for循环promise.then()中的变量输出结果","url":"/2021/10/08/%E7%94%A8async_await%E6%94%B9%E5%8F%98for%E5%BE%AA%E7%8E%AFpromise.then()%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C/","content":"<blockquote>\n<p>这个只针对用var声明的变量，<strong>可以用es6新增关键字 let 去声明变量就不会存在这个问题</strong></p>\n</blockquote>\n<p>如果在for循环中使用promise的then方法去打印for循环的i变量会得到如下结果</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c589b2197dff61891dccba1b23aca6ac804f/0.png\" alt=\"请输入图片描述\"></p>\n<p>可以发现控制台打印了5次i变量的值都为5，而不是0 1 2 3 4，这是因为i是全局变量，每次i++都会覆盖前一次结果，如果希望控制台能输出0 1 2 3 4这样的期望结果呢，这里就要用到async/await</p>\n<p><img src=\"https://p.qlogo.cn/hy_personal/3e28f14aa0516842d26cd9850b43c589bad93a9ba88c7790a323c8a6d9d6a3e6/0.png\" alt=\"请输入图片描述\"></p>\n<p>async的作用就是指明loop为异步函数，await会等待promise.then()这个异步函数执行完才会继续执行for循环</p>\n","categories":["前端编程"],"tags":["JavaScript","异步函数"]},{"title":"解决中文input输入事件在pc端触发两次","url":"/2022/05/13/%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87input%E8%BE%93%E5%85%A5%E4%BA%8B%E4%BB%B6%E5%9C%A8pc%E7%AB%AF%E8%A7%A6%E5%8F%91%E4%B8%A4%E6%AC%A1/","content":"<p>电脑输入法为中文时input事件会触发两次，在手机端是正常的，可以用<code>compositionend</code>事件替代input解决这个中文输入问题，但是除了中文外的数字，字符等都不会触发这个事件。<br><code>console.log</code>打印触发两次的时间间隔只相差1毫秒，所以可以把最后那次触发的给剔除掉<br>这里可以用<a href=\"/archives/10.html\">防抖或者节流</a>都能达到目的，防抖节流的时间设置在1毫秒后就能剔除掉第二次触发事件</p>\n","categories":["前端编程"]},{"title":"请求体类型","url":"/2022/05/09/%E8%AF%B7%E6%B1%82%E4%BD%93%E7%B1%BB%E5%9E%8B/","content":"<p>在发送post请求时可能需要把数据传给后端服务器，一般都是把数据放在配置项的body中发送，请求头content-type会决定body是何种参数，常用有<br><code>application/x-www-form-urlencoded</code><br><code>application/json</code><br><code>multipart/form-data</code></p>\n<p>application/x-www-form-urlencoded请求体类型为url格式<code>a=1&amp;b=2</code>，在get请求时叫查询参数</p>\n<p>对于对象</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以使用qs库，for循环处理，和<code>new URLSearchparams(obj)</code>构造函数，把对象传给构造函数，更多URLSearchparams对象方法见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\">MDN</a></p>\n<p>application/json请求体类型为JSON字符串<code>&#39;&#123;&#39;a&#39;:&#39;1&#39;,&#39;b&#39;:&#39;2&#39;&#125;&#39;</code>，直接<code>JSON.stringify(obj)</code>把对象转成JSON字符串</p>\n<p>multipart/form-data传表单数据给后端，使用<code>new FormData()</code>创建</p>\n","categories":["前端编程"]},{"title":"防抖和节流 — 性能优化","url":"/2021/11/16/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81_%E2%80%94_%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/","content":"<p>节流: 在规定时间内只能执行一次<br>防抖: 如果在规定时间内会重新计算时间来执行函数，换句话说，在规定时间外执行才会执行，在规定时间内执行函数那么永远不会执行</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">节流\n<span class=\"token keyword\">var</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行'</span><span class=\"token punctuation\">)</span>\n            flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当flag是true时才会执行setTimeout，如果在两秒内执行fun函数，由于设置了flag为false，setTimeout不会执行，当回调执行完毕，把flag设为true 此时就能再次调用setTimeout</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">防抖\n<span class=\"token keyword\">var</span> timer\n<span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在setTimeout前加上clearTimeout去清除定时器，所以在两秒内执行fun函数的话，就会执行clearTimeout，导致setTimeout不会执行。跟节流不同的是，执行多次fun函数，每次小于2秒的话，节流每2秒会执行一次，而防抖只会在最后一次执行</p>\n","categories":["前端编程"]}]